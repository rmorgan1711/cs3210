Jon Bowen
CS 3210 HW 1.2
Design

*** Inputs ***
the name of the file to process as a string

*** Outputs ***
log file written to disk

*** Data Structures ***
- Enum for the groups of instructions grouped by syntax structure
	Start,
    End,
    OneOp,
    ThreeOp,
    Copy,
    Move,
    TestAndBranch,
    Branch

- Enum for error types, e.g., too few operands, invalid op code, invalid label, etc

- Map from instruction string to instruction group, e.g. {"ADD", OpGroups.ThreeOp}

- Map from error enum types to error string output in summary


*** Pseudo(ish)-code of process ***

string filename = command line argument // extensionless
string[] lineArray = read in all lines in file
List<string> outLines = new List<string>()
add header lines to outLines

remove all lines that are only blanks or only comments
remove all comments from the ends of lines and trailing white space

if (first content line is not "SRT")
	record error
	add error to outLines
else
	remove line from line array

foreach (line in lineArray)
	add line to outLines
	check all white space is ' ' character
	check line for correct label, if any
	check opcode is in the set of op codes
	get type of opcode (grouped by syntax structure)
	check correct number of opperands
	check type of operands for opcode (e.g. immediate value, register name)

	for (first check that reports error)
		record error
		add error to outLines

if (last line is not "END")
	record error
	add error to outLines

add summary to outlines




